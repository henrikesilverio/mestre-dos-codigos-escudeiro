//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MDC.Escudeiro.Exercicio.Teorico {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Text {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Text() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MDC.Escudeiro.Exercicio.Teorico.Text", typeof(Text).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Em quais linguagens o C# foi inspirado.
        /// </summary>
        internal static string Pergunta_0_0 {
            get {
                return ResourceManager.GetString("Pergunta-0-0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Inicialmente o C# foi criado para qual finalidade.
        /// </summary>
        internal static string Pergunta_0_1 {
            get {
                return ResourceManager.GetString("Pergunta-0-1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Quais os principais motivos para a Microsoft ter migrado para o Core.
        /// </summary>
        internal static string Pergunta_0_2 {
            get {
                return ResourceManager.GetString("Pergunta-0-2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Cite as principais diferenças entre .Net Full Framework e .Net Core.
        /// </summary>
        internal static string Pergunta_0_3 {
            get {
                return ResourceManager.GetString("Pergunta-0-3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) O que é POO.
        /// </summary>
        internal static string Pergunta_1_0 {
            get {
                return ResourceManager.GetString("Pergunta-1-0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) O que é polimorfismo.
        /// </summary>
        internal static string Pergunta_1_1 {
            get {
                return ResourceManager.GetString("Pergunta-1-1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) O que é abstração.
        /// </summary>
        internal static string Pergunta_1_2 {
            get {
                return ResourceManager.GetString("Pergunta-1-2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) O que é encapsulamento.
        /// </summary>
        internal static string Pergunta_1_3 {
            get {
                return ResourceManager.GetString("Pergunta-1-3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Quando usar uma classe abstrata e quando devo usar uma interface.
        /// </summary>
        internal static string Pergunta_1_4 {
            get {
                return ResourceManager.GetString("Pergunta-1-4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) O que faz as interfaces IDisposable, IComparable, ICloneable e IEnumerable.
        /// </summary>
        internal static string Pergunta_1_5 {
            get {
                return ResourceManager.GetString("Pergunta-1-5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Existe herança múltipla (de classes) em C#.
        /// </summary>
        internal static string Pergunta_1_6 {
            get {
                return ResourceManager.GetString("Pergunta-1-6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A criação do C# foi baseada nas linguagens de programação C, C++ e Java. Deste modo, programadores habituados com uma dessas linguagens são capazes de desenvolver soluções sem maiores dificuldades, pois ela reúne recursos de cada uma destas linguagens base e adiciona novos recursos exclusivos. Em relação a linguagem C, o C# tem foco na compilação de soluções de alto nível, já a linguagem C é voltada para o desenvolvimento de baixo nível. Outras comparações, de acordo com MSDN (2012), o C#, simplifica de mod [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Resposta_0_0 {
            get {
                return ResourceManager.GetString("Resposta-0-0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to O C# surgiu com a finalidade de possibilitar a criação de soluções executáveis sobre a plataforma .NET Framework, com o intuito de flexibilizar o desenvolvimento de aplicativos. Dessa maneira, o desenvolvedor não cria soluções para um dispositivo eletrônico específico, e sim para a plataforma .NET Framework..
        /// </summary>
        internal static string Resposta_0_1 {
            get {
                return ResourceManager.GetString("Resposta-0-1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to O .NET Framework é usado para desenvolvimento de aplicações Windows usando Windows Forms , WPF e de aplicações Web usando ASP .NET MVC. O .NET Core é open-source e multiplataforma e suporta UWP e as bibliotecas da ASP .NET Core. A UWP é usada para criar aplicação Windows 10 e a ASP .NET Core é usada para criar aplicações Web para Windows, Linux e Mac..
        /// </summary>
        internal static string Resposta_0_2 {
            get {
                return ResourceManager.GetString("Resposta-0-2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to O principal motivo foi adicionar as seguintes características e torna-lo o sucessor do .Net framework. Primeiramente, a possibilidade de plataforma cruzada entre diferentes sistemas operacionais para uma mesma solução. O .Net Core possui código-fonte aberto, se tornando um software livre. Ele implementa funcionalidades modernas como programação assíncrona e recursos de alto desempenho. Além de fornecer compatibilidade com contêineres do Docker disponibilizando uma implantação flexível..
        /// </summary>
        internal static string Resposta_0_3 {
            get {
                return ResourceManager.GetString("Resposta-0-3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Programação orientada a objetos (POO, ou OOP segundo as suas siglas em inglês) é um paradigma de programação baseado no conceito de &quot;objetos&quot;, que podem conter dados na forma de campos, também conhecidos como atributos, e códigos, na forma de procedimentos, também conhecidos como métodos. Uma característica de objetos é que um procedimento de objeto pode acessar, e geralmente modificar, os campos de dados do objeto com o qual eles estão associados (objetos possuem uma noção de &quot;this&quot; (este) ou &quot;self&quot; (própr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Resposta_1_0 {
            get {
                return ResourceManager.GetString("Resposta-1-0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Em programação orientada a objetos, polimorfismo é o princípio pelo qual duas ou mais classes derivadas da mesma superclasse podem invocar métodos que têm a mesma assinatura, mas comportamentos distintos..
        /// </summary>
        internal static string Resposta_1_1 {
            get {
                return ResourceManager.GetString("Resposta-1-1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Abstração é a habilidade de concentrar nos aspectos essenciais de um contexto qualquer, ignorando características menos importantes ou acidentais. Em modelagem orientada a objetos, uma classe é uma abstração de entidades existentes no domínio do sistema de software..
        /// </summary>
        internal static string Resposta_1_2 {
            get {
                return ResourceManager.GetString("Resposta-1-2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Encapsulamento vem de encapsular, que em programação orientada a objetos significa separar o programa em partes, o mais isolado possível. A idéia é tornar o software mais flexível, fácil de modificar e de criar novas implementações. O Encapsulamento serve para controlar o acesso aos atributos e métodos de uma classe..
        /// </summary>
        internal static string Resposta_1_3 {
            get {
                return ResourceManager.GetString("Resposta-1-3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Uma classe abstrata pode conter métodos completos ou incompletos. Uma Interface pode conter apenas a assinatura de um método, mas nenhum corpo ou implementação. Portanto, em uma classe abstrata, pode-­se implementar métodos, mas em uma Interface, não. Suponha que vamos criar várias classes que têm métodos em comum e outros métodos funcionam diferente para cada classe. Uma forma de fazer isso é usar as classes abstratas..
        /// </summary>
        internal static string Resposta_1_4 {
            get {
                return ResourceManager.GetString("Resposta-1-4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IDisposable fornece um mecanismo para liberar recursos não gerenciados. IComparable define um método de comparação de tipo específico generalizado que implementa uma classe ou um tipo de valor para solicitar ou classificar suas instâncias. ICloneable dá suporte à clonagem, que cria uma nova instância de uma classe com o mesmo valor de uma instância existente. IEnumerable expõe um enumerador que dá suporte a uma iteração simples em uma coleção não genérica..
        /// </summary>
        internal static string Resposta_1_5 {
            get {
                return ResourceManager.GetString("Resposta-1-5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Não, essa estratégia não é permitida no C# devido a complicações acarretadas pelo uso de herança múltipla. Apesar disso, o C# possui herança transitiva, isto é, que permite herança através de hierarquia sequencial, disponibilizando os membros herdados da classe avô e da classe pai para a classe neto. Outra alternativa é a utilização de interfaces implementadas..
        /// </summary>
        internal static string Resposta_1_6 {
            get {
                return ResourceManager.GetString("Resposta-1-6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Perguntas teóricas sobre C#..
        /// </summary>
        internal static string Titulo_0 {
            get {
                return ResourceManager.GetString("Titulo-0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ({0}) Perguntas teóricas sobre POO..
        /// </summary>
        internal static string Titulo_1 {
            get {
                return ResourceManager.GetString("Titulo-1", resourceCulture);
            }
        }
    }
}
